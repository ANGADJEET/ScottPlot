@inject IRecipesService RecipeService
@inject NavigationManager NavManager
@implements IDisposable

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <img src="favicon.svg" height="36px" />
        @if (!@IconMenuActive)
        {
            <a class="navbar-brand" href="">ScottPlot Blazor Demo</a>
        }
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="bottom-row">
    <div class="icon-menu-arrow">
        @if (!@IconMenuActive)
        {
            <span class="oi oi-arrow-left" style="color: white;" @onclick="ToggleIconMenu"></span>
        }
        else
        {
            <span class="oi oi-arrow-right" style="color: white;" @onclick="ToggleIconMenu"></span>
        }
    </div>
</div>

@if (!@IconMenuActive)
{
    <div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
        <h2 class="mt-4 fs-6 ps-3 fw-bold">Getting Started</h2>
        <div class="sidebar-button">
            <a href="/quickstart" class="sidebar-button">Quickstart</a>
        </div>
        <div class="sidebar-button">
            <a href="/signal" class="sidebar-button">Performance Test</a>
        </div>
        <hr />

        <h1 class="mt-4 fs-3 ps-3">ScottPlot Cookbook</h1>
        <div class="px-3">
            <input class="form-control w-100" @bind-value="SearchTerm" placeholder="Search..." @bind-value:event="oninput" />
        </div>

        <nav class="flex-column px-2">
            @foreach (string chapter in GetFilteredRecipeChapters())
            {
                <h1 class="mt-4 fs-4 ps-2">@chapter</h1>

                @foreach (ICategory category in GetFilteredRecipeCategories(chapter))
                {
                    <h2 class="mt-4 fs-6 ps-2 fw-bold">@category.CategoryName</h2>

                    @foreach (IRecipe recipe in GetFilteredRecipes(category))
                    {
                        @if (RecipeService.IsSelected(recipe))
                        {
                            <div class="sidebar-selected">
                                <a>@recipe.Name</a>
                            </div>
                        }
                        else
                        {
                            <div class="sidebar-button" @onclick="() => ShowRecipe(recipe)">
                                <a>@recipe.Name</a>
                            </div>
                        }
                    }
                }
            }
        </nav>
    </div>
}

@code {
    string _SearchTerm = string.Empty;
    string SearchTerm { get => _SearchTerm; set { _SearchTerm = value; UpdateFilter(); } }

    private bool collapseNavMenu = true;
    private bool IconMenuActive { get; set; } = false;
    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    //EventCallback for sending bool to MainLayout
    [Parameter]
    public EventCallback<bool> ShowIconMenu { get; set; }

    protected override void OnInitialized()
    {
        UpdateFilter();
        RecipeService.RecipeChanged += this.StateHasChanged; // subscribe
    }

    public void Dispose()
    {
        RecipeService.RecipeChanged -= this.StateHasChanged; // unsubscribe
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private async Task ToggleIconMenu()
    {
        IconMenuActive = !IconMenuActive;

        await ShowIconMenu.InvokeAsync(IconMenuActive);
    }

    private void UpdateFilter()
    {
        if (string.IsNullOrWhiteSpace(SearchTerm))
        {
            FilteredRecipes = AllRecipes;
            return;
        }

        string term = SearchTerm.Trim();

        List<Query.RecipeInfo> hits = [];
        foreach (Query.RecipeInfo info in AllRecipes)
        {
            bool hit = false;
            hit |= info.Category.CategoryName.Contains(term, StringComparison.InvariantCultureIgnoreCase);
            hit |= info.Category.CategoryDescription.Contains(term, StringComparison.InvariantCultureIgnoreCase);
            hit |= info.Recipe.Name.Contains(term, StringComparison.InvariantCultureIgnoreCase);
            hit |= info.Recipe.Description.Contains(term, StringComparison.InvariantCultureIgnoreCase);
            if (hit)
                hits.Add(info);
        }

        FilteredRecipes = hits;
    }

    private IEnumerable<Query.RecipeInfo> AllRecipes = Query.GetRecipes();
    private IEnumerable<Query.RecipeInfo> FilteredRecipes = [];
    private IEnumerable<string> GetFilteredRecipeChapters() => FilteredRecipes.Select(x => x.Chapter).Distinct();
    private IEnumerable<ICategory> GetFilteredRecipeCategories(string chapter) => FilteredRecipes.Where(x => x.Chapter == chapter).Select(x => x.Category).Distinct();
    private IEnumerable<IRecipe> GetFilteredRecipes(ICategory category) => FilteredRecipes.Where(x => x.Category.CategoryName == category.CategoryName).Select(x => x.Recipe);

    protected void ShowRecipe(IRecipe recipe)
    {
        NavManager.NavigateTo("/", replace: true);
        RecipeService.Recipe = recipe;
    }
}
