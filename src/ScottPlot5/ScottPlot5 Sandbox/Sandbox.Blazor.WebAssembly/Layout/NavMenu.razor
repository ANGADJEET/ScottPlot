@inject IRecipesService RecipeService
@inject NavigationManager NavManager
@implements IDisposable

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <img src="favicon.svg" height="36px"/>
        @if (!@IconMenuActive)
        {
            <a class="navbar-brand" href="">ScottPlot Blazor Demo</a>
        }
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>
<div class="bottom-row">
    <div class="icon-menu-arrow">
        @if (!@IconMenuActive)
        {
            <span class="oi oi-arrow-left" style="color: white;" @onclick="ToggleIconMenu"></span>
        }
        else
        {
            <span class="oi oi-arrow-right" style="color: white;" @onclick="ToggleIconMenu"></span>
        }
    </div>
</div>
@if (!@IconMenuActive)
{
    <div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
        <div class="sidebar-button">
            <a href="/quickstart">ScottPlot Blazor Quickstart</a>
        </div>
        <div class="sidebar-button">
            <a href="/signal">Signal Plot</a>
        </div>
        <hr />
        <input class="mx-2 mt-2" @bind-value="SearchTerm" placeholder="Filter..." @bind-value:event="oninput" />
        <br />
        <InputCheckbox class="mx-2 mt-2" @bind-Value=@RecipeService.ShowOpenGL /> <label>use openGL</label>
        <hr />

        <nav class="flex-column px-2">
            @foreach (var recipes in FilteredRecipes)
            {
                <h1 class="mt-4">@recipes.Key.CategoryName</h1>

                @foreach (var recipe in recipes.Value)
                {
                    @if (RecipeService.IsSelected(recipe))
                    {
                        <div class="sidebar-selected">
                            <a>@recipe.Name</a>
                        </div>
                    }
                    else
                    {
                        <div class="sidebar-button" @onclick="() => ShowRecipe(recipe)">
                            <a>@recipe.Name</a>
                        </div>
                    }
                }
            }
        </nav>
    </div>
}

@code {
    string SearchTerm { get; set; } = "";
    private bool collapseNavMenu = true;
    private bool IconMenuActive { get; set; } = false;
    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

   //EventCallback for sending bool to MainLayout
    [Parameter]
    public EventCallback<bool> ShowIconMenu { get; set; }

    protected override void OnInitialized()
    {
        RecipeService.RecipeChanged += this.StateHasChanged; // subscribe
    }

    public void Dispose()
    {
        RecipeService.RecipeChanged -= this.StateHasChanged; // unsubscribe
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
    private async Task ToggleIconMenu()
    {
        IconMenuActive = !IconMenuActive;

        await ShowIconMenu.InvokeAsync(IconMenuActive);
    }
    IReadOnlyDictionary<ICategory, IEnumerable<IRecipe>> FilteredRecipes
    {
        get
        {
            var filter = SearchTerm?.Trim();
            if (string.IsNullOrEmpty(filter))
                return RecipeService.RecipesByCategory;

            var d = new Dictionary<ICategory, IEnumerable<IRecipe>>();
            foreach (var x in RecipeService.RecipesByCategory)
            {
                var l = x.Value.Where(v => v.Name.Contains(filter, StringComparison.InvariantCultureIgnoreCase)).ToList();
                if (l.Count > 0)
                    d.Add(x.Key, l);
            }
            return d;
        }
    }
    protected void ShowRecipe(IRecipe recipe)
    {
        NavManager.NavigateTo("/", replace: true);
        RecipeService.Recipe = recipe;
    }
}
