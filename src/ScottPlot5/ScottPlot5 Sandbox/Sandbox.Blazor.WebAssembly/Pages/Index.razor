@page "/"
@page "/recipe/{selectRecipe?}"

@inject IRecipesService RecipeService
@implements IDisposable

<main>
    @if (RecipeService.HasRecipe)
    {
        <div class="p-3">
            <div class="fs-3">@RecipeService.RecipeName</div>
            <div>@RecipeService.RecipeDescription</div>
        </div>
        @if (RecipeService.ShowOpenGL)
        {
            <h5>OpenGL control</h5>
            <BlazorPlotGL @ref=BlazorPlotGL Style="width: min(100%, 800px); height: 600px;" />
        }
        else
        {
            <h5>Standard control</h5>
            <BlazorPlot @ref=BlazorPlot Style="width: min(100%, 800px); height: 600px;" />
        }
        <div class="m-3">
            <div class="bg-light border rounded d-inline-block p-3">
                @if (RecipeService.HasSourceCode)
                {
                    <CodeSnippet Code="@RecipeService.SourceCode" />
                }
                else
                {
                    <p>Loading...</p>
                }
            </div>
        </div>
    }
    <div class="text-muted p-4" style="margin-top: 10rem;">
        @ScottPlot.Version.LongString Running on .NET @Environment.Version
    </div>
</main>

@code {
    [Parameter]
    public string SelectRecipe { get; set; } = string.Empty;


    BlazorPlot BlazorPlot { get; set; } = new();
    BlazorPlotGL BlazorPlotGL { get; set; } = new();
    string SearchTerm { get; set; } = "";

    protected override void OnInitialized()
    {
        RecipeService.RecipeChanged += this.RefreshWithPlot; // subscribe
        RecipeService.BackendChanged += this.RefreshWithPlot; // subscribe
    }

    public void Dispose()
    {
        RecipeService.RecipeChanged -= this.RefreshWithPlot; // unsubscribe
        RecipeService.BackendChanged -= this.RefreshWithPlot; // unsubscribe
    }

    protected override void OnParametersSet()
    {
        if (!string.IsNullOrEmpty(SelectRecipe))
        {
            if (RecipeService.FindRecipe(SelectRecipe))
            {
                ShowRecipe(RecipeService.Recipe!);
            }
        }
    }
    protected void RefreshWithPlot()
    {
        StateHasChanged();
        UpdatePlot();
    }
    protected void UpdatePlot()
    {
        InvokeAsync(async () =>
        {
            // add little delay to ensure BlazorPlot is visible to ensure refresh works!
            await Task.Delay(1);

            if (RecipeService.ShowOpenGL)
            {
                BlazorPlotGL.Reset();
                RecipeService.Recipe?.Execute(BlazorPlotGL.Plot);
                BlazorPlotGL.Refresh();
            }
            else
            {
                BlazorPlot.Reset();
                RecipeService.Recipe?.Execute(BlazorPlot.Plot);
                BlazorPlot.Refresh();
            }
        });
    }
    protected void ShowRecipe(IRecipe recipe)
    {
        RecipeService.Recipe = recipe;
        UpdatePlot();
    }
}

